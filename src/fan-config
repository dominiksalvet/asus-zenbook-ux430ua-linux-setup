#!/bin/bash

#-------------------------------------------------------------------------------
# Copyright (C) 2017-2018 Dominik Salvet
# SPDX-License-Identifier: MIT
#-------------------------------------------------------------------------------
# Parameters:
#     $1 - number of seconds to sleep before the fan speed configuration
#-------------------------------------------------------------------------------

## SOFTWARE DEPENDECIES

sw_missing=0
# software is missing if at least one piece of software is missing
$(type echo > /dev/null); ((sw_missing |= $?))
$(type cat > /dev/null); ((sw_missing |= $?))
$(type printf > /dev/null); ((sw_missing |= $?))
$(type sleep > /dev/null); ((sw_missing |= $?))

# check if some software is missing
if [[ "$sw_missing" -ne 0 ]]; then
    echo 'Required software is missing, configuration canceled.'
    exit 1
fi

## DEFINITIONS

# base address for fan speed configuration
FAN_SPEED_BASE_ADDR=1335

# array of temperatures (in Celsius) per each fan speed level
temps=(55 60 62 65 68 72 76 80)

# direct ACPI call
function acpi_call {
    echo "$*" > /proc/acpi/call
    cat /proc/acpi/call; echo
}

# convert number from decimal to hexadecimal form
function dec_to_hex {
    printf '%x' $1
}

# get address of each fan speed level
function level_to_addr {
    echo $(($FAN_SPEED_BASE_ADDR + $1))
}

# assigning fan speed level and temperature
function level_temp_set {
    acpi_call "\_SB.PCI0.LPCB.EC0.WRAM 0x$(dec_to_hex $(level_to_addr $1)) 0x$(dec_to_hex $2)"
}

## EXECUTION

# check "temps" length
if [ ${#temps[@]} != 8 ]; then
    echo 'Error: length of the "temps" array must be exactly 8.'
    exit 2
fi

# perform sleep before executing
if [ -z "$1" ]; then
    sleep 20
else
    sleep $1
fi

# setup each individual fan speed level
level_temp_set 7 ${temps[7]}
level_temp_set 6 ${temps[6]}
level_temp_set 5 ${temps[5]}
level_temp_set 4 ${temps[4]}
level_temp_set 3 ${temps[3]}
level_temp_set 2 ${temps[2]}
level_temp_set 1 ${temps[1]}
level_temp_set 0 ${temps[0]}
